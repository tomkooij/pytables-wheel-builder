environment:

  # repo/tag to checkout
  REPO_NAME: https://github.com/tomkooij/PyTables.git
  BRANCH_NAME: master
  TAG_NAME: v3.3.0

  # Make setup.py include conda specific dll's in wheels
  BUILDWHEEL: True

  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    # From: https://github.com/astropy/ci-helpers/blob/master/appveyor/windows_sdk.cmd
    CMD_IN_ENV: "cmd /E:ON /V:ON /C %APPVEYOR_BUILD_FOLDER%\\ci\\appveyor\\windows_sdk.cmd"

  matrix:
    - PYTHON: "C:\\Miniconda"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Miniconda-x64"
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Miniconda3"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Miniconda3-x64"
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "64"

    - PYTHON: "C:\\Miniconda35"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Miniconda35-x64"
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"

install:
  # this installs the appropriate Miniconda (Py2/Py3, 32/64 bit),
  # as well as pip, conda-build, and the binstar CLI
  - powershell .\\ci\\appveyor\\install.ps1   
  - powershell .\\ci\\appveyor\\missing-headers.ps1
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PYTHON%\\Library\\bin;%PATH%"
  - cmd: conda install --yes numexpr cython bzip2
  # instal hdf5 from conda-forge to get the latest version.
  # anaconda still has 1.8.16
  - cmd: conda install --yes -c conda-forge hdf5=1.8.17
  - cmd: set HDF5_DIR="%PYTHON%\\Library\\"
  - cmd: set BZIP2_DIR="%PYTHON%\\Library\\" 
  - cmd: SET LIBRARY_PATH="%HDF5_DIR%\\lib"
    # fetch pytables, checkout tag to build
  - cmd: git clone %REPO_NAME%
  - cmd: cd PyTables
  - cmd: git checkout tags/%TAG_NAME%
  # save git release and commit hash in COMMIT_HASH
  - cmd: git describe >COMMIT_HASH
  - cmd: set /p COMMIT_HASH=<COMMIT_HASH
  # Make sure the wheel works:
  # Build wheel and install using pip. 
  - "%CMD_IN_ENV% python setup.py bdist_wheel"
  - cmd: dir /B dist\*whl >WHEEL
  - cmd: set /p WHEEL=<WHEEL
  - cmd: pip install dist\%WHEEL%

build: false

test_script:
  - cmd: cd ..
  - cmd: python -m tables.tests.test_all

artifacts:
  # download wheels
  - path: PyTables\dist\*
    name: wheel
    
deploy:
  release: tables-$(COMMIT_HASH)
  description: 'Wheels build by pytables-wheel-builder'
  provider: GitHub
  auth_token:
    secure: /FbPeXk4buZbYZ2f1XYxpR5a7W6LeZvb9Fkh8qxo83u17Bq8SyY69eMiJOYLNmgT
  artifact: wheel
  draft: true
  prerelease: true
  force_update: true

# deployment *creates* a new GitHub tag. So do not build on tags.
# building tags may cause an infinite build loop when each new tag is unique.
skip_tags: true

